{
	// Place your cpp workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Print to console": {
		"scope": "cpp",
		"prefix": "segment",
		"body": [
			"class SegmentTree {                                               ",
			"    private: vii st , A;",
			"    int n;",
			"    int left(int p) { ",
			"        return p << 1; ",
			"    }",
			"    int right(int p) { ",
			"        return (p << 1) + 1; ",
			"    }",
			"",
			"    void build(int p , int l , int r) {",
			"        if(l == r) {",
			"            st[p] = A[l];",
			"        }",
			"        else {",
			"            build(left(p) , l , (l + r) / 2);",
			"            build(right(p) , (l + r) / 2 + 1 , r);",
			"            int p1 = st[left(p)] , p2 = st[right(p)];",
			"            st[p] = (p1 >= p2) ? p1 : p2;",
			"        }",
			"    }",
			"",
			"    int rmq(int p , int l , int r , int i , int j) {",
			"        if(r < i || l > j) { ",
			"            return INT_MIN; ",
			"        }",
			"        else if(l >= i && r <= j) {",
			"            return st[p];",
			"        }",
			"", 
			"        int p1 = rmq(left(p) , l , (l + r) / 2 , i , j);",
			"        int p2 = rmq(right(p) , (l + r) / 2 + 1 , r , i , j);",
			"        return (p1 >= p2) ? p1 : p2;",
			"    }",
			"",
			"    public:",
			"    SegmentTree(const vii &_A) {",
			"        A = _A; n = (int)A.size();",
			"        st.assign(4 * n , 0);",
			"        build(1 , 0 , n-1);",
			"    }",
			"    int rmq(int i , int j) {",
			"        return rmq(1 , 0 , n-1 , i , j);",
			"    }",
			"};",
			// "console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	}
}