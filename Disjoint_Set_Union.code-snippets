{
	// Place your cpp workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Print to console": {
		"scope": "cpp",
		"prefix": "dsu",
		"body": [
			"class UnionFind{                                                               ",                                                             
			"    private: vii p , rank , sz;",
			"    int dset;",
			"    public:",
			"    UnionFind(int N) { rank.assign(N , 0); sz.assign(N , 1) ; dset = N;",
			"        p.assign(N , 0); for (int i = 0 ; i < N ; i++) p[i] = i; }",
			"    int findSet(int i) { return (p[i] == i) ? i : (p[i] = findSet(p[i])); }",
			"    bool isSameSet(int i , int j) { return findSet(i) == findSet(j); }",
			"    int sizeOfSet(int i) { return (p[i] == i) ? sz[i] : (sizeOfSet(p[i])); }",
			"    int numDisjointSets() { return dset; }",
			"    void unionSet(int i , int j) {",
			"        if(!isSameSet(i , j)) {",
			"            int x = findSet(i) , y = findSet(j); dset--;",
			"            if(rank[x] > rank[y]) { p[y] = x; ",
			"                                sz[x] += sz[y];",
			"                                sz[y] = 0; }",
			"            else {              p[x] = y;",
			"                                sz[y] += sz[x];",
			"                                sz[x] = 0;",
			"                                if(rank[x] == rank[y]) rank[y]++; }",
			"} } };",
			// "console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	}
}